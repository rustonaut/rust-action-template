name: 'Runs Cargo'
description: "Runs cargo, assuming it's available in the path."
inputs:
  cmd:
    description: 'The subcommand to run (build/test)'
    required: true
  features:
    description: |
      The features to enable.
      Set it to '' to disable all features.
      Set it e.g. to 'default,feat1' to enable default features and feat1.
      Set it to '*' to enabled all features.
    required: false
    default: default
  deny_warnings:
    description: "Adds a special flag to cargo calls which act's like a top-level #[deny(warnings)]."
    required: false
    default: false
  all:
    description: "Adds the --all flag"
    default: false
    required: false
  release:
    description: "Adds the --release flag"
    default: false
    required: false
  verbose:
    description: "Adds the --verbose flag"
    default: true
    required: false
runs:
    using: "composite"
    steps:
        - shell: bash
          run: |
            set -euo pipefail
            declare -a params
            declare -x RUSTFLAGS=""

            params+=("${{ inputs.cmd }}")

            if [ "${{ inputs.deny_warnings }}" = "true" ] ; then
              RUSTFLAGS="$RUSTFLAGS -D warnings"
            fi

            case "${{ inputs.features }}" in
              "*")
                params+=("--all-features")
                ;;
              "default")
                # --features "default" can cause problems if there are no default enabled features.
                ;;
              *) #default case not "*"
                params+=("--no-default-features" "--features" "${{ inputs.features }}")
                ;;
            esac

            if [ "${{ inputs.all }}" = "true" ] ; then
              params+=("--all")
            fi

            if [ "${{ inputs.release }}" = "true" ] ; then
              params+=("--release")
            fi

            if [ "${{ inputs.verbose }}" = "true" ] ; then
              params+=("--verbose")
            fi

            function debug_cmd() {
              echo "::debug::cmd: \"$1\""
              shift
              echo "::debug::params:"
              while [ "$#" -gt 0 ] ; do
                echo "::debug::- \"$1\""
                shift
              done
            }

            debug_cmd cargo "${params[@]}"
            echo "::debug::RUSTFLAGS=$RUSTFLAGS"
            EXIT_CODE=0
            cargo "${params[@]}" || EXIT_CODE=$?

            if [ ! "$EXIT_CODE" = 0 ] ; then
              echo ::error::Failed to run cargo ${params[0]}.
            fi

            exit $EXIT_CODE
